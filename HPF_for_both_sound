# Tasarlanan AGF gitar sesini geçirmeli, bağlama sesini söndürmelidir. 
# Bu nedenle aynı AGF'yi her iki sese deneyip doğruluğunu görelim. 
# Emin olmak için çıkış işaretlerinin enerjileri de hesaplanmıştır.

import matplotlib.pyplot as plt # grafik çizimi için gerekli kütüphanenin aktifleştirilmesi
import numpy as np
from scipy.io.wavfile import read # Ses dosyasının okunması için gerekli kütüphane
%matplotlib notebook
from scipy.fft import fft, ifft
import scipy
from scipy.io import loadmat
from IPython.lib.display import Audio
import scipy.signal as sgnl

Fs, x = read("B12_gitar01.wav") # dosyayı oku
print('gitar:')
display(Audio(gitar, rate=Fs))

Fs1, x1 = read("B12_baglama01.wav") # dosyayı oku
print('baglama:')
display(Audio(baglama, rate=Fs1))

#---------------------------------------------------------------------------------------------------------------------

# FIR filtre ekleme (copy from last lab report)
filter_data = loadmat('B12_SesGrubu01_agf.mat') # pyfda'dan elde edilen filtreyi yükle
Coeffs = filter_data['ba'].astype(np.float64) # katsayıları alın ve bunları float'a dönüştürün
b = Coeffs[0,:] # first column is b
a=np.zeros(len(b)) # FIR filtre olduğu için
a[0]=1 # FIR filtre olduğu için

# Frekans alanı grafiğini gösterelim
w3, Hw = sgnl.freqz(b,a)
Hw_mag = abs(Hw)
Hw_phs = np.unwrap(np.angle(Hw)) # Değerler arasındaki deltaları 2*pi tamamlayıcı olarak değiştirerek aç
fig, (ax1, ax2) = plt.subplots(2)
ax1.plot(w3*Fs/(2*np.pi), Hw_mag) # filtrenin genliğini çizdir
ax2.plot(w3*Fs/(2*np.pi), Hw_phs), plt.ylabel('degrees') # filtrenin fazını çizdir
plt.xlabel('frequency x$\pi$ rad/sample')

#---------------------------------------------------------------------------------------------------------------------

# Gitar sesinin AGF'den geçirmek

filtered_gitar = sgnl.lfilter(b, a, gitar)  # katsayıları kullanarak, sinyali filtrenin girişine uyguladık.
plt.figure()
plt.stem(abs(filtered_gitar)) # genliğini çiz
plt.xlabel("n") # grafiğin x ekseninin isimlendirilmesi
plt.ylabel("|Y[n]|") # grafiğin y ekseninin isimlendirilmesi
plt.title("Filtre cıkısında gitar için $ |Y[n]| $") # grafiğin y ekseninin isimlendirilmesi

w = np.arange(-np.pi, np.pi, 2*np.pi/N_gitar) # omega ekseninin -pi ile +pi arasında tanımlanması
gitar_yw = np.fft.fftshift(np.fft.fft(filtered_gitar,N_gitar)/N_gitar) # ayrık zamanlı işaretin Fourier transformu

plt.figure()
plt.stem(w*Fs/(2*np.pi),abs(gitar_yw)) # X(w) işaretinin grafiğinin çizdirilmesi
plt.xlabel("$Hz$") # grafiğin x ekseninin isimlendirilmesi
plt.ylabel("$|Y(\omega)|$") # grafiğin y ekseninin isimlendirilmesi
plt.title("Filtre cıkısında gitar için $|Y(\omega)|$") # grafiğin y ekseninin isimlendirilmesi

#---------------------------------------------------------------------------------------------------------------------

# Baglama sesinin AGF'den geçirmek

filtered_baglama = sgnl.lfilter(b, a, baglama) # katsayıları kullanarak, sinyali filtrenin girişine uyguladık.
plt.figure()
plt.stem(abs(filtered_baglama)) # genliğini çiz
plt.xlabel("n") # grafiğin x ekseninin isimlendirilmesi
plt.ylabel("|Y[n]|") # grafiğin y ekseninin isimlendirilmesi
plt.title("Filtre cıkısında baglama için $ |Y[n]| $") # grafiğin y ekseninin isimlendirilmesi

w1 = np.arange(-np.pi, np.pi, 2*np.pi/N_gitar) # omega ekseninin -pi ile +pi arasında tanımlanması
baglama_yw = np.fft.fftshift(np.fft.fft(filtered_baglama,N_gitar)/N_gitar) # ayrık zamanlı işaretin Fourier transformu

plt.figure()
plt.stem(w1*Fs1/(2*np.pi),abs(baglama_yw)) # X(w) işaretinin grafiğinin çizdirilmesi
plt.xlabel("$Hz$") # grafiğin x ekseninin isimlendirilmesi
plt.ylabel("$|Y(\omega)|$") # grafiğin y ekseninin isimlendirilmesi
plt.title("Filtre cıkısında baglama için $|Y(\omega)|$") # grafiğin y ekseninin isimlendirilmesi


#---------------------------------------------------------------------------------------------------------------------

# 2. Filtreden geçmiş sesleri dinlemek
# Her ikisini de kolayca dinleyip karşılaştırmak için ardarda eklendi 
from IPython.lib.display import Audio

print('AGF cıkısındaki gitar sesi:')
display(Audio(filtered_gitar, rate=Fs))

print('Orjinal gitar sesi:')
display(Audio(gitar, rate=Fs))

print('AGF cıkısındaki baglama sesi:')
display(Audio(filtered_baglama, rate=Fs1))

print('Orjinal baglama sesi:')
display(Audio(baglama, rate=Fs1))

#---------------------------------------------------------------------------------------------------------------------


# ENERJi HESABI YAPALIM

# Dinlediğimiz seslerin sonucunda istenilen sonuç tam olarak elde edildi mi emin olamazsak diye bir yazılımsal önlem aldık.
# Bu sayede filtreden geçemeyen işaretin enerjisi düşük olacaktır.
i=0
ii=0
gitartoplam=0
baglamatoplam=0

# Parseval teoreminden elde edildi. Enerji = (1/N) * Bütün Y(w)'lerin toplamının karesi

for i in range (len(gitar_yw)):
    gitartoplam+=(abs(gitar_yw[i]))**2
    
gitarenerji=gitartoplam/N_gitar

for ii in range (len(baglama_yw)):
    baglamatoplam+=(abs(baglama_yw[ii]))**2

baglamaenerji=baglamatoplam/N_baglama

# Mantıksal eleme
if gitarenerji>baglamaenerji:
    print("gitar=",gitarenerji)
    print("baglama=",baglamaenerji)
    print("Enerjiler arasındaki fark:",abs(gitarenerji-baglamaenerji))
    print("Gitar sesi duyulmaktadır.")
    
else:
    print("gitar=",gitarenerji)
    print("baglama=",baglamaenerji)
    print("Enerjiler arasındaki fark:",abs(gitarenerji-baglamaenerji))
    print("Baglama sesi duyulmaktadır.")
    
    
